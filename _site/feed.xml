<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-18T19:28:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">dpTablo Blog</title><subtitle>Dev Blog</subtitle><author><name>이영우</name></author><entry><title type="html">Gradle 프로젝트의 gradle 버전 변경</title><link href="http://localhost:4000/build/gradle/change-gradle-version-in-project/" rel="alternate" type="text/html" title="Gradle 프로젝트의 gradle 버전 변경" /><published>2020-01-29T10:07:00+09:00</published><updated>2019-04-13T22:06:00+09:00</updated><id>http://localhost:4000/build/gradle/change-gradle-version-in-project</id><content type="html" xml:base="http://localhost:4000/build/gradle/change-gradle-version-in-project/"><![CDATA[<p>프로젝트의 root 경로에서 아래 명령을 실행합니다. gradle 6.1.1로 지정한 예제입니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gradlew wrapper <span class="nt">--gradle-version</span> 6.1.1
</code></pre></div></div>

<p>console 창에서 수행한 결과 화면 입니다.</p>

<p><img src="/assets/images/_posts/2020-01-29-change-gradle-version-in-project/gradle_version_capture.png" alt="" /></p>

<p>명령을 수행하고 나면 gradlew 파일이 변경되고, projectRoot/gradle/wrapper/gradle-wrapper.properties 의 내용이 변경됩니다.</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">distributionBase</span><span class="p">=</span><span class="s">GRADLE_USER_HOME</span>
<span class="py">distributionPath</span><span class="p">=</span><span class="s">wrapper/dists </span>
<span class="py">distributionUrl</span><span class="p">=</span><span class="s">https</span><span class="se">\:</span><span class="s">//services.gradle.org/distributions/gradle-6.1.1-bin.zip </span>
<span class="py">zipStoreBase</span><span class="p">=</span><span class="s">GRADLE_USER_HOME</span>
<span class="py">zipStorePath</span><span class="p">=</span><span class="s">wrapper/dists</span>
</code></pre></div></div>]]></content><author><name>dpTablo</name></author><category term="build" /><category term="gradle" /><category term="gradle" /><category term="wrapper" /><category term="version" /><summary type="html"><![CDATA[gradle wrapper 의 version을 변경하는 방법]]></summary></entry><entry><title type="html">Spring Boot + React + Gradle in VSCode</title><link href="http://localhost:4000/spring%20boot/react/gradle/vscode/spring-boot-react-gradle-in-vscode/" rel="alternate" type="text/html" title="Spring Boot + React + Gradle in VSCode" /><published>2019-10-16T17:30:00+09:00</published><updated>2019-10-16T17:30:00+09:00</updated><id>http://localhost:4000/spring%20boot/react/gradle/vscode/spring-boot-react-gradle-in-vscode</id><content type="html" xml:base="http://localhost:4000/spring%20boot/react/gradle/vscode/spring-boot-react-gradle-in-vscode/"><![CDATA[<p>Spring Boot + React + Gradle 프로젝트를 구성하고 VSCode 안에서 통합하여 개발하는 방법을 설명합니다.</p>

<p>설명 내용은 프리젠테이션 형식으로 준비해보았습니다.</p>

<p>일반적인 SPA (Single Page Application) 형태가 아닌 페이지단위로 react entry point 를 각각 분리하는 형태의 모델입니다.</p>

<p>이런 구성도 있구나 참고해주셨으면 좋겠습니다.</p>

<p>Github 저장소에 코드를 공유합니다.</p>

<p><a href="https://github.com/dpTablo/springboot_react_gradle_in_vscode">https://github.com/dpTablo/springboot_react_gradle_in_vscode</a></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/lGZOmPgkYaVAdR" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/dpTablo/spring-boot-react-gradle-in-vscode" title="Spring Boot + React + Gradle in VSCode" target="_blank">Spring Boot + React + Gradle in VSCode</a> </strong> from <strong><a href="//www.slideshare.net/dpTablo" target="_blank">dpTablo</a></strong> </div>]]></content><author><name>dpTablo</name></author><category term="spring boot" /><category term="react" /><category term="gradle" /><category term="vscode" /><category term="project template" /><category term="spring boot" /><category term="react" /><category term="gradle" /><category term="vscode" /></entry><entry><title type="html">ELB (Elastic Load Balancer) 환경에서 nginx 의 http to https redirection</title><link href="http://localhost:4000/aws/nginx/http/elb-nginx-http-redirection/" rel="alternate" type="text/html" title="ELB (Elastic Load Balancer) 환경에서 nginx 의 http to https redirection" /><published>2019-07-02T19:56:00+09:00</published><updated>2019-07-02T19:56:00+09:00</updated><id>http://localhost:4000/aws/nginx/http/elb-nginx-http-redirection</id><content type="html" xml:base="http://localhost:4000/aws/nginx/http/elb-nginx-http-redirection/"><![CDATA[<p>아마존 AWS 의 SSL 을 사용하고 ELB(Elastic Load Balancer) 를 사용하고 있다면 일반적으로 아래와 같은 상황일 것입니다.</p>

<p>http://[service domain] -&gt; ELB 80 port -&gt; EC2 80 port (nginx) -&gt; service application (8080 port)</p>

<p>https://[service domain] -&gt; ELB 443 port -&gt; EC2 80 port (nginx) -&gt; service application (8080 port)</p>

<p>저의 경우에는 EC2 에 Ubuntu Server 16.04 LTS 를 사용하였으며 service application 으로는 Spring boot 8080 port로 서비스 되고 있는 상태였습니다.</p>

<p>ELB 가 80/443 port 를 각각 listening 하게 되며 실제 서비스가 되고 있는 Ubuntu 쪽에서는 80 port 만 inbound 되고 있는 것이지요.</p>

<p>실질적으로 nginx 입장에서는 SSL 설정이 없는 것입니다.</p>

<p>X-Forwarded 관련 request header 를 설정하여 ELB 를 통해서 nginx 에 request 가 전송되었을 때 정보를 전달하여 이를 이용한 http 요청을 https 로 redirect 합니다.</p>

<p>[AWS 참고문서 - HTTP 헤더 및 Classic Load Balancer]</p>

<p>https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/classic/x-forwarded-headers.html</p>

<p>아래는 nginx 에 설정한 내용입니다.</p>

<p>nginx 설치 경로의 sites-enabled 경로에 configure 설정을 추가합니다.</p>

<p>http://[service domain]/test 로 접속하게 되면 proxy_set_header 설정에 의해 ELB 에서 nginx 로 request 가 전달될 때 header 값이 전달됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server { 
    # NGINX will listen on port 80 for both IP V4 and V6 
    listen 80; 
    listen [::]:80; 
    
    # Here we should specify the name of server 
    server_name test.com; 
    
    # Requests to given location will be redirected 
    location /test { 
        # NGINX will pass all requests to specified location here 
        proxy_pass http://localhost:8080/test;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port; 
    } 
    
    if ($http_x_forwarded_proto = 'http') { 
        return 301 https://$host$request_uri; 
        } 
    }
</code></pre></div></div>

<p>$http_x_forwarded_proto 값을 if 문으로 체크하여 http 프로토콜로 request 가 전달된 경우에 HTTP 301 상태 값으로 redirect 하게 됩니다.</p>]]></content><author><name>dpTablo</name></author><category term="AWS" /><category term="nginx" /><category term="http" /><category term="AWS" /><category term="ELB" /><category term="nginx" /><category term="http" /><category term="https" /><category term="redirection" /></entry><entry><title type="html">electron + react 연동하기 with vscode</title><link href="http://localhost:4000/electron/react/vscode/electron-react-vscode/" rel="alternate" type="text/html" title="electron + react 연동하기 with vscode" /><published>2018-04-12T19:01:00+09:00</published><updated>2018-04-12T19:01:00+09:00</updated><id>http://localhost:4000/electron/react/vscode/electron-react-vscode</id><content type="html" xml:base="http://localhost:4000/electron/react/vscode/electron-react-vscode/"><![CDATA[<p>electron 과 react 를 이용한 구현 기술 학습을 하던 중 직접 프로젝트를 설정해보았습니다.</p>

<p>electron 이 구동하면서 react 의 페이지로 렌더링을 하고 이와 관련된 테스트, 디버깅을 vscode 에서 하는 것을 목표로 템플릿 프로젝트를 구성해보았습니다.</p>

<p>만든 템플릿 프로젝트는 Github 를 참조해주세요  ( https://github.com/dpTablo/electron-react-template )</p>

<p>기존에 github 내에 있는 템플릿 프로젝트들은 보통 webpack 버전 2 또는 3 계열이 많았습니다.</p>

<p>제가 이 템플릿을 작성하는 시점에서 webpack 최신버전은 4.5.0 이었습니다.</p>

<p>가급적 최신버전으로 적용해보고자 하는 의도로 react, electron 등 주요 모듈들을 최신 버전으로 구성했습니다.</p>

<p>webpack 4.x 로 오면서 opmization 부분들이 3.x 에서는 플러그인 형태로 적용되었으나, development 모드일 때 대다수의 최적화 항목들이 적용되는 것으로 변경되었습니다. (webpack 개발문서 중 mode 부분 참조 : https://webpack.js.org/concepts/mode/#src/components/Sidebar/Sidebar.jsx)</p>

<p>아래는 설치한 모듈 목록 입니다.</p>

<p>electron 과 react 를 비롯하여 webpack, sass, babel, eslint 등을 적용하였습니다.</p>

<p>react 테스트를 위해 webpack-dev-server 를 적용하였습니다.</p>

<pre><code class="language-node">{
    "name": "dptablo-electron-react",
    "version": "0.1.0",
    "main": "main.js",
    "scripts": {},
    "config": {},
    "dependencies": {
        "electron": "^1.8.4",
        "react": "^16.3.1",
        "react-dom": "^16.3.1"
    },
    "devDependencies": {
        "babel-core": "^6.26.0",
        "babel-loader": "^7.1.4",
        "babel-preset-es2015": "^6.24.1",
        "babel-preset-react": "^6.24.1",
        "copy-webpack-plugin": "^4.5.1",
        "css-loader": "^0.28.2018-04-12-electron-react-vscode",
        "eslint": "^4.19.1",
        "eslint-plugin-react": "^7.7.0",
        "file-loader": "^1.1.2018-04-12-electron-react-vscode",
        "html-webpack-plugin": "^3.2.0",
        "node-sass": "^4.8.3",
        "react": "^16.3.1",
        "react-dom": "^16.3.1",
        "react-hot-loader": "^4.0.1",
        "sass-loader": "^6.0.7",
        "source-map-loader": "^0.2.3",
        "style-loader": "^0.20.3",
        "url-loader": "^1.0.1",
        "webpack": "^4.5.0",
        "webpack-cli": "^2.0.14",
        "webpack-dev-server": "^3.1.1"
    }
}
</code></pre>

<p>electron 의 진입 코드는 main.js 입니다.</p>

<p>webpack 빌드 경로를 /dist 로 설정하여 해당 경로의 index.html 를 지정합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">loadURL</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">format</span><span class="p">({</span>
    <span class="na">pathname</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dist</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">index.html</span><span class="dl">'</span><span class="p">),</span>
    <span class="na">protocol</span><span class="p">:</span> <span class="dl">'</span><span class="s1">file:</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">slashes</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}))</span>
</code></pre></div></div>

<p>index.html 에는 react 가 변환된 bundle.js 만 포함합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;title&gt;</span>React<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>vscode 에서 ‘webpack-dev-server’ task 를 실행합니다.<br />
해당 task 를 실행하면 자동으로 빌드되어 /dist 로 배포되고 테스트용 로컬 웹서버가 기동됩니다.</p>

<p><img src="/assets/images/_posts/2018-04-12-electron-react-vscode/01.png" alt="" /></p>

<p>브라우저를 통해 접속하시면 아래와 같은 화면을 볼 수 있습니다.
<img src="/assets/images/_posts/2018-04-12-electron-react-vscode/02.png" alt="" /></p>

<p>크롬 브라우저를 –remote-debugging-port 옵션에 9222 번으로 지정하여 실행합니다.</p>

<p>vscode 에서 App.jsx 의 render 함수 부분에 break point 를 설정하고 ‘attach webpack-dev-server’ 를 디버그로 실행합니다.</p>

<p>그리고 크롬에서 페이지를 새로고침하면 아래처럼 vscode 단에서 디버깅을 하실 수 있습니다.</p>

<p><img src="/assets/images/_posts/2018-04-12-electron-react-vscode/03.png" alt="" /></p>

<p>react 로직이 구현된 파일은 확장자를 .jsx 를 사용하였고, 스타일을 동일한 이름의 .scss 파일로 정의해두었습니다.</p>

<p>저도 기존에 프론트엔드를 접하지 않았었고 아직 기초적인 설정을 적용했다고 생각합니다.</p>

<p>여기까지 진행하면서 electron 과 react 를 한번에 디버그를 진행할 수 없는 문제가 있습니다.</p>

<p>electron 의 디버그는 ‘Launch electron’ 으로 구동 해야 합니다.</p>

<p>보완 되는 부분들이나 추가적으로 모듈이 적용되는 것은 차차 github 에 반영할 예정입니다.</p>]]></content><author><name>dpTablo</name></author><category term="electron" /><category term="react" /><category term="vscode" /><category term="electron" /><category term="react" /><category term="vscode" /><category term="project" /><category term="template" /></entry></feed>